version: 2.1
workflows:
  version: 2
  deploy:
      jobs:
      - pantheon/push
      - get_pantheon_hash:
          requires:
            - pantheon/push
          pre-steps:
            - playground/setbashenv
      # - playground/npmbuild_and_persist:
      #     package_lock_location: "frontity"
      #     path_to_persist: "frontity/build"
      #     build_command: "npm run build"
      #     requires:
      #       - get_pantheon_hash
      #     pre-steps:
      #       - playground/setbashenv
      # - deploy_static_and_cloud_function:
      #     requires:
      #       - playground/npmbuild_and_persist
      #     pre-steps:
      #       - playground/setbashenv
      #     filters:  # required since `deploy` has tag filters AND requires `test`
      #       branches:
      #         only: master
      # - deploy_multidev_static_and_cloud_function:
      #     requires:
      #       - playground/npmbuild_and_persist
      #     filters:  # required since `deploy` has tag filters AND requires `test`
      #       branches:
      #         ignore: master

jobs:
  get_pantheon_hash:
    docker:
      - image: quay.io/pantheon-public/build-tools-ci:5.x
    working_directory: ~/sitedir
    environment:
      TZ: "/usr/share/zoneinfo/America/Los_Angeles"
      # @todo, remove this variable https://github.com/pantheon-systems/circleci-orb/issues/7
      BUILD_TOOLS_VERSION: dev-option-for-no-force
      TERM: dumb
      PANTHEON_REPO_DIR: "/tmp/pantheon_repo"
    
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Derive additional environment variables
          command: mkdir -p $HOME/.ssh && echo "StrictHostKeyChecking no" >> "$HOME/.ssh/config
      - run:
          name: Authenticate with Pantheon's CLI using a machine token
          command: terminus -n auth:login --machine-token="$TERMINUS_TOKEN"
      - run:
          name: Checkout site repository from Pantheon
          command: |
            # Ensure that there's a Pantheon repo locally. If one was not
            # restored from cache, clone it fresh.
            if [ ! -d "$PANTHEON_REPO_DIR/.git" ]; then
              mkdir $PANTHEON_REPO_DIR
              cd $PANTHEON_REPO_DIR
              git init
              git remote add pantheon $(terminus connection:info $TERMINUS_SITE.dev --field=git_url)
              git remote -v
            fi
            git fetch pantheon 
      - run:
          name: cat bash-txt
          command: |
            cat bash_env.txt
      - run:
          name: Get pantheon remote hash
          command: |
            cd $PANTHEON_REPO_DIR
            git ls-remote pantheon HEAD
          # command: |
          #   export PANTHEON_REMOTE=$(terminus connection:info $TERMINUS_SITE.dev --field=git_url)
          #   export PANTHEON_SHA1=$(git ls-remote $PANTHEON_REMOTE HEAD | awk '{ print $1}')
          #   echo ${PANTHEON_SHA1:0:7}
      # - run:
      #     name: Get pantheon remote hash
      #     command: |
      #       export PANTHEON_REMOTE=$(terminus connection:info $TERMINUS_SITE.dev --field=git_url)
      #       export PANTHEON_SHA1=$(git ls-remote $PANTHEON_REMOTE HEAD | awk '{ print $1}')
      #       echo "export PANTHEON_SHORT_SHA1='${PANTHEON_SHA1:0:7}'" >> bash_env.txt
      #       echo ${PANTHEON_SHA1:0:7}
      - persist_to_workspace:
          root: .
          paths:
            - bash_env.txt

  deploy_static_and_cloud_function:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - playground/setbashenv
      - run:
          name: get short hash
          command: echo $PANTHEON_SHORT_SHA1

      # - run:
      #     name: Login to gcloud
      #     command: |
      #       echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
      #       gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      #       gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}     
      # - run:
      #     name: deploy-static
      #     # @todo make a variable for serverlessplayground and runtime, and probably everything in gcloud functions deploy.
      #     command: |
      #       gsutil -m rsync -r -c -d frontity/build/static gs://${GCP_BUCKET}/${TERMINUS_ENV}/static
      #       gsutil -m rsync -r -c -d frontity/build/static gs://${GCP_BUCKET}/dev--${CIRCLE_SHA1:0:7}/static
      #       gsutil -m rsync -r -c -d frontity/build/static gs://${GCP_BUCKET}/live--${CIRCLE_SHA1:0:7}/static
      #       gsutil -m rsync -r -c -d frontity/build/static gs://${GCP_BUCKET}/test--${CIRCLE_SHA1:0:7}/static
      # - run:
      #     name: deploy
      #     # @todo make a variable for serverlessplayground and runtime, and probably everything in gcloud functions deploy.
      #     command: |
      #       rm -rf frontity/build/static
      #       gcloud functions deploy ${TERMINUS_SITE}--${TERMINUS_ENV} --project=${GOOGLE_PROJECT_ID} --runtime=nodejs10 --trigger-http  --allow-unauthenticated  --entry-point=default --source=frontity/build --set-env-vars="TERMINUS_SITE=${TERMINUS_SITE},TERMINUS_ENV=${TERMINUS_ENV}"
      #       gcloud functions deploy ${TERMINUS_SITE}--${TERMINUS_ENV}--${CIRCLE_SHA1:0:7} --project=${GOOGLE_PROJECT_ID} --runtime=nodejs10 --trigger-http  --allow-unauthenticated  --entry-point=default --source=frontity/build --set-env-vars="TERMINUS_SITE=${TERMINUS_SITE},TERMINUS_ENV=${TERMINUS_ENV}"
      #       gcloud functions deploy ${TERMINUS_SITE}--test--${CIRCLE_SHA1:0:7} --project=${GOOGLE_PROJECT_ID} --runtime=nodejs10 --trigger-http  --allow-unauthenticated  --entry-point=default --source=frontity/build --set-env-vars="TERMINUS_SITE=${TERMINUS_SITE},TERMINUS_ENV=test"
      #       gcloud functions deploy ${TERMINUS_SITE}--live--${CIRCLE_SHA1:0:7} --project=${GOOGLE_PROJECT_ID} --runtime=nodejs10 --trigger-http  --allow-unauthenticated  --entry-point=default --source=frontity/build --set-env-vars="TERMINUS_SITE=${TERMINUS_SITE},TERMINUS_ENV=live"

  deploy_multidev_static_and_cloud_function:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - playground/setbashenv
      - run:
          name: Login to gcloud
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run:
          name: deploy-static
          # @todo make a variable for serverlessplayground and runtime, and probably everything in gcloud functions deploy.
          command: |
            gsutil -m rsync -r -c -d frontity/build/static gs://${GCP_BUCKET}/${TERMINUS_ENV}/static      
      - run:
          name: deploy
          # @todo make a variable for serverlessplayground and runtime, and probably everything in gcloud functions deploy.
          command: |
            rm -rf frontity/build/static
            gcloud functions deploy ${TERMINUS_SITE}--${TERMINUS_ENV} --project=${GOOGLE_PROJECT_ID} --runtime=nodejs10 --trigger-http  --allow-unauthenticated  --entry-point=default --source=frontity/build --set-env-vars="TERMINUS_SITE=${TERMINUS_SITE},TERMINUS_ENV=${TERMINUS_ENV}"

orbs:
  pantheon: pantheon-systems/pantheon@0.2.0
  playground: fauxalgore/playground@0.0.2
